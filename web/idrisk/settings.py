"""
Django settings for idrisk project.

Generated by 'django-admin startproject' using Django 3.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from ast import If
from pathlib import Path
import environ, os
from django.core.management.utils import get_random_secret_key

# config .env file
env = environ.Env()
environ.Env.read_env()


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY', default=get_random_secret_key())

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DEBUG', default=False)

# when on real server, remove de '*' and add the page's domain
ALLOWED_HOSTS = ['localhost', '127.0.0.1', '*']


# Application definition

INSTALLED_APPS = [        
    'adminlte3',        # General use templates & template tags (should appear first)
    'adminlte3_theme',  # Optional: Django admin theme (must be before django.contrib.admin)
        
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Third-Party Apps
    'corsheaders',
    'rest_framework',
    'rest_framework.authtoken',
    'django_q',
    'pwa',

    # Apps
    'accounts',     # users
    'designer',     # form's editor
    'formsmanager.apps.FormsmanagerConfig',
    'preview',      # form's preview and testing
    'sform',        # inspector's app
    'help',         # help
    #'operations',   # manage all operations
    'operations.apps.OperationsConfig',
    'opeditview',   # edit/view operation
    'rest',         # rest api      
    'files', # setup some stuff

    'django_cleanup',   # automatically deletes any assets if corresponding form/operation is also deleted
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]



ROOT_URLCONF = 'idrisk.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'], #[str(BASE_DIR.joinpath('templates'))],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'idrisk.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

# EXAMPLE OF SETTING THE SCHEMA FOR THE POSTGRESQL DATABASE
#OPTIONS={'OPTIONS': {'options': '-c search_path=' + env('POSTGRE_SCHEMA')}}
#POSTGRE = env.db('POSTGRE_URL')
#POSTGRE.update(OPTIONS)

DEFAULT_DATABASE = 'default'

DATABASES = {
    'default': env.db('IDRISK_URL'),    
    'world': env.db('WORLD_URL'),
    #'asae': env.db('ASAE_URL'),
    #'postgreDB': POSTGRE,
    #'oracleDB': env.db('ORACLE_URL'),
}

# New elements and field<->element links can only be created from these databases
FIELDS_ORIGIN_DATABASES = {
    'world': {'NAME': 'world', 'ENGINE': 'mysql'},
    #'asae': {'NAME': 'asae', 'ENGINE': 'mysql'},
    #'postgreDB': {'NAME': 'postgreDB', 'ENGINE': 'postgresql'},
    #'oracleDB': {'NAME': 'oracleDB', 'ENGINE': 'oracle'},
}



# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True




# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

################
# STATIC FILES #
################

# IMPORTANT - MAKE SURE TO SET DEBUG CORRECTLY:
#               DEV => DEBUG = True
#               PRODUCTION => DEBUG = False
# when collectstatic, DEBUG will take the default value: False
if DEBUG:
    STATICFILES_DIRS = [BASE_DIR  / "static"]
else:
    STATIC_ROOT = os.path.join(BASE_DIR, 'static')

STATIC_URL = '/static/'

#STATIC_ROOT = BASE_DIR  / "django_static"


################
# REDIRECTIONS #
################
LOGIN_REDIRECT_URL = 'home'
LOGOUT_REDIRECT_URL = 'home' #'login'


#########
# EMAIL #
#########
#EMAIL_BACKEND = "django.core.mail.backends.filebased.EmailBackend"
#EMAIL_FILE_PATH = str(BASE_DIR.joinpath('sent_emails'))

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_USE_TLS = True
EMAIL_PORT = env.int('EMAIL_PORT', default=587)
EMAIL_HOST_USER = env('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

##################
# AUTHENTICATION #
##################
AUTH_USER_MODEL = 'accounts.User'


REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    )
}

########
# CORS #
########
 
# when on real server, set this to false and add to the CORS_ALLOWED_ORIGINS
CORS_ALLOW_ALL_ORIGINS = True


CORS_ALLOWED_ORIGINS = [
    "http://localhost:8000",
    "http://localhost:8080",
    "http://127.0.0.1:8000",
    "http://127.0.0.1:8080",
    #"http://0.0.0.0:8000",
    #"http://0.0.0.0:8080",
]

###########
# UPLOADS #
###########
# the URL endpoint. This is the URL the user can go to and upload their files from the browser
MEDIA_URL = '/media/'
# store all the uploaded files in the folder 'media' created in the BASE_DIR
#MEDIA_ROOT = BASE_DIR / 'media'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# FORM_ASSETS_X changes => check formsmanager: models.py | services.py | views.py | urls.js
FORM_ASSETS_DIR = 'form_assets/'
FORM_ASSETS_URL = 'media/form_assets/'
# OPERATION_ASSETS_X changes => check operations: models.py | services.py | views.py | urls.js
OPERATION_ASSETS_DIR = 'operation_assets/'
OPERATION_ASSETS_URL = 'media/operation_assets/'

###############
# TRANALATION #
###############

LOCALE_PATHS = (BASE_DIR / 'locale',)

USE_I18N = True

LANGUAGE_CODE = 'en'

LANGUAGES = [
    ('en','English'),
    ('pt', 'Portuguese'),
    ('hr', 'Croatian'),
]

###############
# DJANGO-Q #
###############

Q_CLUSTER = {
    'name': 'ers_ia',
    'workers': env.int('N_WORKERS', default=4),
    'recycle': 500,
    'retry': 1800,
    'timeout': 60,
    'compress': True,
    'save_limit': 0,
    'cpu_affinity': 1,
    'label': 'Django Q',
    'catch_up': False,
    'orm': 'default'
}



################
# PWA #
################

PWA_SERVICE_WORKER_PATH = BASE_DIR / 'sform/static/sform/js/ServiceWorker.js'
PWA_APP_NAME = 'Forms'
PWA_APP_DESCRIPTION = "Forms PWA"
PWA_APP_THEME_COLOR = '#000000'
PWA_APP_BACKGROUND_COLOR = '#ffffff'
PWA_APP_DISPLAY = 'standalone'
PWA_APP_SCOPE = '/sform/'
PWA_APP_ORIENTATION = 'any'
PWA_APP_START_URL = '/sform/'
PWA_APP_STATUS_BAR_COLOR = 'default'
PWA_APP_ICONS = [
    {
        'src': '../static/images/icons/android-chrome-192x192.png',
        'sizes': '192x192'
    }
]
PWA_APP_ICONS_APPLE = [
    {
        'src': '../static/images/icons/apple-touch-icon.png',
        'sizes': '180x180'
    }
]
PWA_APP_SPLASH_SCREEN = [
    {
        'src': '../static/images/icons/android-chrome-192x192.png',
        'media': '(device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2)'
    }
]
PWA_APP_DIR = 'ltr'
PWA_APP_LANG = 'en-US'



#settings.py
if DEBUG:
    import mimetypes
    mimetypes.add_type("application/javascript", ".js", True)